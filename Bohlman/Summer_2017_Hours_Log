CAAO Internship Log: Summer 2017

5/17/2017: 7 hours
Today, I got introduced to what I will be doing and who I’ll be working with. I also got introduced to my work space and some of the
equipment I will be working with. I also had timesheet difficulties, so I spent a fair amount of time today trying to figure out how I can
put in my hours online (looking for future correspondence concerning online timesheet). I also picked up some equipment: monitor from Kim,
keyboard and mouse from dude on 3rd floor. The first two tasks I was given was to download the software for the Basler acA640 -750 µm
camera and figure out how to use it, and to read the book “Handbook of CCD Astronomy” cover to cover. I downloaded the software for the
camera and took a few videos/pictures with it. I also went through the first 3 chapters of the handbook and took notes on it. Tomorrow, I
want to take notes on the next two chapters of the handbook (4 and 5), and play around with the software for the camera more and start
working on a write up for that. I also want to resolve my timesheet difficulties.

5/18/2017: 8 hours
Inputted hours today on UAccess. Also read/took notes through chapters 4 and 5 of the handbook. Started looking at the Basler camera
features and cataloged the different features I could find. Made notes on what program I am supposed to make and started to program in C to
reach my goals. Read the SDK guide for the Basler camera so I could program this correctly. Tomorrow, I want to finish taking notes on the
handbook and continue programming in C.

5/19/2017: 8 hours
Finished working through the handbook and taking notes. Set up Visual Studio on my laptop, along with fixing environment variables and
removing programs that could mess with my coding, and tried to import the sample projects with it. Had to download Windows SDK 8.1 to try
and build the programs. My goals for next week include starting to actually code the program I want to use with the Basler program, read
through the handbook one more time, and to start learning C++.

5/22/2017: 8 hours
Reinstalled/Modified the Visual Studio installation and got the building of the sample C++ files to work with the camera. Quickly learned
basic concepts of C++ in order to apply those concepts to my code writing. Combed through the API in order to view what exactly I have to
do in order to achieve my goals for programming. Focused exclusively on trying t find out how to edit the exposure time today; got a few
leads but nothing spectacular yet. Tomorrow, I want to make more headway on the camera exposure problem and begin planning my code writing. 
Also, I want to change my hours log in the GitHub page to a markdown format.

5/23/2017: 8 hours
Mostly worked in the API for pylon today. Figured out that I want to make a USB Instant Camera object, and implemented that into the start 
of my code. Right now, the code is only for grabbing a single image, and hasn’t been tested. It also was written quite choppily, so it has 
not been doxygen-ized. I also got a tour of the lab today, specifically looking at Beast (GPU problems?) and Corona. Tomorrow, my goals are
finish writing and testing my first C++ program written specifically for the USB camera, and then look through the API and see what I have 
to do in order to start adapting some of my goals for the camera software. I also want to use doxygen to correctly comment the sample 
program I have written once it’s done.

5/24/2017: 8 hours
Coded exclusively today. Tested my initial sample program, and it worked for all two test cases (camera connected, camera unconnected). I
tried to work on the three assignments set out for me. In terms of exposure, I tried to set the value of the parameter, but that is 
throwing an error in the program. I also have exported the output of the camera in the tiff format, so I am going to want to learn how 
to change that to fits and also keep the image and store it in the memory. I also did not get to format my code in the doxygen format, 
so I must do that soon. 

5/25/2017: 6 hours
Finished writing the exposure setting part of the software I’m working on for the Basler camera. Tested it, and I believe it works, 
therefore, I have achieved one of the goals for this software. I also started researching ways to use fits with C++, and looked at CCFits
and FITS++. Finally, I started viewing at how I am going to store the data of the picture in memory. I shall work more on the last two 
goals next week, when I can ask Jared questions about the exposure, any wrappers/packages I should use, and whatnot. I also started 
reading up on the doxygen notation, and started formatting my code that way, so I will need to finish that next week.

5/30/2017: 5 hours (Thus far) + 2 hours (Later)
Worked more with Doxygen installation and my code. realized that I need to take my code out of the main function for my doxygen commenting 
to work. Started to install cfitsio and cmake in order to work with fits files in my code. Might finish installation of those two tonight, 
as I have to leave early.
Later Edit: Worked on installations for cmake and cfitsio. WIll continue tomorrow.

5/31/2017: 7 hours
Today, I worked on the installation for cmake and cfitsio to get them to work, which was certainly difficult. I believe cmake installed 
correctly, but I might have to do a reinstall just to make sure. I still couldn't get an example program for cfitsio to work, so I'll 
have to continue with that tomorrow. I am getting compilation errors, which I think is in part due to linking libraries/headers incorrectly.

6/01/2017: 8 hours
Today, I worked on repairing the cmake/cfitsio installation. I reinstalled cmake so hopefully that fixed any problems with that program. In 
order to get the cfitsio example program to work, I eventually discovered a workaround involving the .dll for cfitsio being included in every
project library with VS. Because the program ended up working after that and including cfitsio libraries, I wanted to start repurposing the 
example fits program from cfitsio to my own program. Therefore I started reading the programmers guide to cfitsio to help with that.

6/02/2017: 8 hours
Worked on adding the cfitsio program to my own, including the painful process of adding libraries, dll files, and configuring the project. 
However, the program only outputs a .tiff file thus far, but I want a fits file from the program. Therefore, I started trying to reformat the
image file in memory to make a fits file instead. Investigated the Basler SDK API in order to find how to get data from each pixel.

6/05/2017: 8 hours
Honestly could not find a way to directly transfer data from memory to a fits file from the basler image object. Asked for help, and 
discovered some shortcomings of my code in terms of how fits expects image data to be read into a file. Fixed the code and will start 
debugging tomorrow, as the program doesn't produce a readable output.

6/6/2017: 6 hours
Debugged the program today, noticed that there was a method that had a non zero exit code, so I tried to find the cause of this. Kept on 
getting an error somewhere in the code due to null pointers/mistakes when making the fits file, so tomorrow, I will look at these errors
further and examine why it's affecting my code.

6/7/2017: 8 hours
Finished debugging the program today, realized that the errors were wonky variables, cleaning up io stream of stdin, and an error with array 
parameters and behaviors when reading in data. Program works and outputs a viewable file, however, the outputted fits file does not match
outputted tiff file, so I needed to get help with that.

6/8/2017: 8 hours
Worked with the SDK in finding the solution to my problem, which is the wrong kind of data is being transferred to the fits file created, so 
the raw image does not match the fits file. Couldn't find much in the SDK, though. I cleaned up my code, updated GitHub, and updated my 
computer (by accident). In the coming days, I will need help on what to do here. What data do I pull from the image to put on the fits file?

6/12/2017: 8 hours
Over the weekend, I altered my code, so I tested that today.
